// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package store

import (
	"context"
)

const checkoutBook = `-- name: CheckoutBook :exec
UPDATE books SET quantity = quantity - 1 WHERE id = $1 AND quantity > 0
`

func (q *Queries) CheckoutBook(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, checkoutBook, id)
	return err
}

const createBook = `-- name: CreateBook :one
INSERT INTO books (title, author, quantity)
VALUES ($1, $2, $3) RETURNING id, title, author, quantity
`

type CreateBookParams struct {
	Title    string `json:"title"`
	Author   string `json:"author"`
	Quantity int64  `json:"quantity"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook, arg.Title, arg.Author, arg.Quantity)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Quantity,
	)
	return i, err
}

const getBookByID = `-- name: GetBookByID :one
SELECT id, title, author, quantity FROM books WHERE id = $1
`

func (q *Queries) GetBookByID(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBookByID, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Quantity,
	)
	return i, err
}

const getBooks = `-- name: GetBooks :many
SELECT id, title, author, quantity FROM books
`

func (q *Queries) GetBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const returnBook = `-- name: ReturnBook :exec
UPDATE books SET quantity = quantity + 1 WHERE id = $1
`

func (q *Queries) ReturnBook(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, returnBook, id)
	return err
}
