// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: invoice.sql

package store

import (
	"context"
	"database/sql"
)

const createInvoice = `-- name: CreateInvoice :one
INSERT INTO "invoice" ("order_id", "invoice_date", "total_amount", "status", "payment_method")
VALUES ($1, CURRENT_TIMESTAMP, $2, $3, $4)
RETURNING id, order_id, invoice_date, total_amount, status, payment_method
`

type CreateInvoiceParams struct {
	OrderID       int64          `json:"order_id"`
	TotalAmount   float64        `json:"total_amount"`
	Status        int64          `json:"status"`
	PaymentMethod sql.NullString `json:"payment_method"`
}

func (q *Queries) CreateInvoice(ctx context.Context, arg CreateInvoiceParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, createInvoice,
		arg.OrderID,
		arg.TotalAmount,
		arg.Status,
		arg.PaymentMethod,
	)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.InvoiceDate,
		&i.TotalAmount,
		&i.Status,
		&i.PaymentMethod,
	)
	return i, err
}

const deleteInvoice = `-- name: DeleteInvoice :exec
DELETE FROM "invoice" WHERE "id" = $1
`

func (q *Queries) DeleteInvoice(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteInvoice, id)
	return err
}

const getAllInvoices = `-- name: GetAllInvoices :many
SELECT id, order_id, invoice_date, total_amount, status, payment_method FROM "invoice"
`

func (q *Queries) GetAllInvoices(ctx context.Context) ([]Invoice, error) {
	rows, err := q.db.QueryContext(ctx, getAllInvoices)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invoice
	for rows.Next() {
		var i Invoice
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.InvoiceDate,
			&i.TotalAmount,
			&i.Status,
			&i.PaymentMethod,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInvoiceByOrderID = `-- name: GetInvoiceByOrderID :one
SELECT id, order_id, invoice_date, total_amount, status, payment_method FROM "invoice" WHERE "order_id" = $1
`

func (q *Queries) GetInvoiceByOrderID(ctx context.Context, orderID int64) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, getInvoiceByOrderID, orderID)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.InvoiceDate,
		&i.TotalAmount,
		&i.Status,
		&i.PaymentMethod,
	)
	return i, err
}

const updateInvoiceStatus = `-- name: UpdateInvoiceStatus :one
UPDATE "invoice"
SET "status" = $1
WHERE "id" = $2
RETURNING id, order_id, invoice_date, total_amount, status, payment_method
`

type UpdateInvoiceStatusParams struct {
	Status int64 `json:"status"`
	ID     int64 `json:"id"`
}

func (q *Queries) UpdateInvoiceStatus(ctx context.Context, arg UpdateInvoiceStatusParams) (Invoice, error) {
	row := q.db.QueryRowContext(ctx, updateInvoiceStatus, arg.Status, arg.ID)
	var i Invoice
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.InvoiceDate,
		&i.TotalAmount,
		&i.Status,
		&i.PaymentMethod,
	)
	return i, err
}
