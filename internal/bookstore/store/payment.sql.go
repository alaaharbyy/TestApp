// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: payment.sql

package store

import (
	"context"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO "payment" ("invoice_id", "amount", "payment_date", "payment_method", "status")
VALUES ($1, $2, CURRENT_TIMESTAMP, $3, $4)
RETURNING id, invoice_id, amount, payment_date, payment_method, status
`

type CreatePaymentParams struct {
	InvoiceID     int64  `json:"invoice_id"`
	Amount        string `json:"amount"`
	PaymentMethod string `json:"payment_method"`
	Status        int64  `json:"status"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment,
		arg.InvoiceID,
		arg.Amount,
		arg.PaymentMethod,
		arg.Status,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.Amount,
		&i.PaymentDate,
		&i.PaymentMethod,
		&i.Status,
	)
	return i, err
}

const deletePayment = `-- name: DeletePayment :exec
DELETE FROM "payment" WHERE "id" = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePayment, id)
	return err
}

const getAllPayments = `-- name: GetAllPayments :many
SELECT id, invoice_id, amount, payment_date, payment_method, status FROM "payment"
`

func (q *Queries) GetAllPayments(ctx context.Context) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, getAllPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.InvoiceID,
			&i.Amount,
			&i.PaymentDate,
			&i.PaymentMethod,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPaymentsByInvoiceID = `-- name: GetPaymentsByInvoiceID :many
SELECT id, invoice_id, amount, payment_date, payment_method, status FROM "payment" WHERE "invoice_id" = $1
`

func (q *Queries) GetPaymentsByInvoiceID(ctx context.Context, invoiceID int64) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, getPaymentsByInvoiceID, invoiceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.InvoiceID,
			&i.Amount,
			&i.PaymentDate,
			&i.PaymentMethod,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :one
UPDATE "payment"
SET "status" = $1
WHERE "id" = $2
RETURNING id, invoice_id, amount, payment_date, payment_method, status
`

type UpdatePaymentStatusParams struct {
	Status int64 `json:"status"`
	ID     int64 `json:"id"`
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, updatePaymentStatus, arg.Status, arg.ID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.InvoiceID,
		&i.Amount,
		&i.PaymentDate,
		&i.PaymentMethod,
		&i.Status,
	)
	return i, err
}
