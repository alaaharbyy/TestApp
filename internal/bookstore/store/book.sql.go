// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: book.sql

package store

import (
	"context"
	"database/sql"
)

const createBook = `-- name: CreateBook :one
INSERT INTO "book" ("title", "author", "description", "price", "quantity", "category_id")
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, title, author, description, price, quantity, category_id
`

type CreateBookParams struct {
	Title       string        `json:"title"`
	Author      int64         `json:"author"`
	Description string        `json:"description"`
	Price       float64       `json:"price"`
	Quantity    int64         `json:"quantity"`
	CategoryID  sql.NullInt64 `json:"category_id"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, createBook,
		arg.Title,
		arg.Author,
		arg.Description,
		arg.Price,
		arg.Quantity,
		arg.CategoryID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Description,
		&i.Price,
		&i.Quantity,
		&i.CategoryID,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM "book" WHERE "id" = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteBook, id)
	return err
}

const getAllBooks = `-- name: GetAllBooks :many
SELECT id, title, author, description, price, quantity, category_id FROM "book"
`

func (q *Queries) GetAllBooks(ctx context.Context) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getAllBooks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Description,
			&i.Price,
			&i.Quantity,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBookByID = `-- name: GetBookByID :one
SELECT id, title, author, description, price, quantity, category_id FROM "book" WHERE "id" = $1
`

func (q *Queries) GetBookByID(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBookByID, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Description,
		&i.Price,
		&i.Quantity,
		&i.CategoryID,
	)
	return i, err
}

const getBooksByAuthor = `-- name: GetBooksByAuthor :many
SELECT id, title, author, description, price, quantity, category_id FROM "book" WHERE "author" = $1
`

func (q *Queries) GetBooksByAuthor(ctx context.Context, author int64) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, getBooksByAuthor, author)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.Description,
			&i.Price,
			&i.Quantity,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
UPDATE "book"
SET "price" = $1, "quantity" = $2
WHERE "id" = $3
RETURNING id, title, author, description, price, quantity, category_id
`

type UpdateBookParams struct {
	Price    float64 `json:"price"`
	Quantity int64   `json:"quantity"`
	ID       int64   `json:"id"`
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBook, arg.Price, arg.Quantity, arg.ID)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.Description,
		&i.Price,
		&i.Quantity,
		&i.CategoryID,
	)
	return i, err
}
