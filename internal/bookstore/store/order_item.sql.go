// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: order_item.sql

package store

import (
	"context"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO "order_item" ("order_id", "book_id", "quantity", "price")
VALUES ($1, $2, $3, $4)
RETURNING id, order_id, book_id, quantity, price
`

type CreateOrderItemParams struct {
	OrderID  int64   `json:"order_id"`
	BookID   int64   `json:"book_id"`
	Quantity int32   `json:"quantity"`
	Price    float64 `json:"price"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.OrderID,
		arg.BookID,
		arg.Quantity,
		arg.Price,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.BookID,
		&i.Quantity,
		&i.Price,
	)
	return i, err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
DELETE FROM "order_item" WHERE "id" = $1
`

func (q *Queries) DeleteOrderItem(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrderItem, id)
	return err
}

const getAllOrderItems = `-- name: GetAllOrderItems :many
SELECT id, order_id, book_id, quantity, price FROM "order_item"
`

func (q *Queries) GetAllOrderItems(ctx context.Context) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, getAllOrderItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.BookID,
			&i.Quantity,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderItemsByOrderID = `-- name: GetOrderItemsByOrderID :many
SELECT id, order_id, book_id, quantity, price FROM "order_item" WHERE "order_id" = $1
`

func (q *Queries) GetOrderItemsByOrderID(ctx context.Context, orderID int64) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, getOrderItemsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.BookID,
			&i.Quantity,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderItem = `-- name: UpdateOrderItem :one
UPDATE "order_item"
SET "quantity" = $1, "price" = $2
WHERE "id" = $3
RETURNING id, order_id, book_id, quantity, price
`

type UpdateOrderItemParams struct {
	Quantity int32   `json:"quantity"`
	Price    float64 `json:"price"`
	ID       int64   `json:"id"`
}

func (q *Queries) UpdateOrderItem(ctx context.Context, arg UpdateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, updateOrderItem, arg.Quantity, arg.Price, arg.ID)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.BookID,
		&i.Quantity,
		&i.Price,
	)
	return i, err
}
